<Mercury>
    # Specifies where files are served from, relative to the Mercury directory
    #   Default: ./public/
    <DocumentRoot> ./tests/files/ </DocumentRoot>

    # Controls the socket bind addresses for IPv4 and IPv6, or "off" if disabled
    #   IPv4 Default: 0.0.0.0
    #   IPv6 Default: ::
    <BindAddressIPv4> 0.0.0.0 </BindAddressIPv4>
    <BindAddressIPv6> :: </BindAddressIPv6>

    # Specifies what port will be used to serve cleartext (non-HTTPS) content
    #   Default: 80
    <Port> 80 </Port>

    # Specifies which port to serve SSL/TLS traffic over, or "off" if disabled
    # See ./conf/ssl/cert.pem and ./conf/ssl/key.pem
    #   Default: off
    <TLSPort> 443 </TLSPort>

    # Enables or disables legacy HTTP versions (HTTP/0.9, HTTP/1.0)
    #   Default: on
    <EnableLegacyHTTPVersions> on </EnableLegacyHTTPVersions>

    # Specifies what name for index files will be served when accessing a directory by name
    # The order (left to right) specifies which files will be searched for first, or empty if desired
    #   Default: index.html, index.htm, index.php
    <IndexFiles> index.html, index.htm, index.php </IndexFiles>

    # Specifies where server access & error logs are stored
    #   Access Default: ./logs/access.log
    #   Error Default: ./logs/error.log
    <AccessLogFile> ./logs/access.log </AccessLogFile>
    <ErrorLogFile> ./logs/error.log </ErrorLogFile>

    # Controls whether IP addresses in log files are anonymized or not.
    #   Default: false
    <RedactLogIPs> false </RedactLogIPs>

    # Whether or not to pass through requests for PHP files to a PHP-CGI process.
    # If disabled, the value of the WinPHPCGIPath node is ignored.
    #   Default: off
    <EnablePHPCGI> on </EnablePHPCGI>

    # NOTE: This node applies to Windows only
    # Points to the php-cgi.exe executable to handle PHP requests on.
    #   Default: ./php/php-cgi.exe
    <WinPHPCGIPath> ./php/php-cgi.exe </WinPHPCGIPath>

    # Match allows individual file/directory control over resource access via regex matches.
    # Note that the pattern matches the relative path received in the HTTP request, not an absolute path.
    <Match pattern=".*">
        # Allows HTTP response headers to be set, only valid within a Match
        <Header name="Cache-Control"> public, must-revalidate, max-age=300 </Header>

        # Enables or disables directory index listings, only valid within a Match (either "on" or "off").
        # Only the first ShowDirectoryIndexes node will be recognized.
        #   Default: on
        <ShowDirectoryIndexes> on </ShowDirectoryIndexes>

        # Controls access to content, only valid within a Match
        # The "mode" attribute controls the default policy, either to deny all except for hosts in the
        #   Allow nodes or to allow all except for hosts in the Deny nodes.
        # Note that if the mode is set to "deny all" then any Deny nodes are skipped, and vice versa
        #   for "allow all" and Allow nodes.
        #   Valid modes: "deny all" | "allow all"
        <Access mode="deny all">
            <Allow> 127.0.0.1 </Allow>
            <Allow> ::1 </Allow>
        </Access>
    </Match>

    <Match pattern=".*.html">
        <Header name="X-Match-Test-Header"> 1 </Header>
    </Match>

    # Controls temporary or permanent redirects for specific files or paths.
    # You can use capture groups like $1 and $2 to reference specific capture groups in the pattern (or $0 for the whole matched string).
    # Note: the "to" attribute is NOT a regular expression, but does support referencing capture groups
    # from the pattern.
    # The example below permanently redirects any HTML files in any directory under /foo/bar to the
    # corresponding HTML file and directory in /baz/qux (see commented-out example below)
    <Redirect pattern="^/redirect_from/(.*?)$" to="/redirect_to/$1"> 301 </Redirect>
    <Redirect pattern="^/redirect_http1.1_only/(.*?)$" to="/redirect_to/$1"> 308 </Redirect>

    # Controls whether or not to honor keep-alive headers in requests to maintain
    # a connection that later requests can come through
    #   Default: on
    <KeepAlive> on </KeepAlive>

    # Specifies how long a keep-alive connection will wait for subsequent requests
    # in SECONDS, if keep-alive connections are enabled
    #   Default: 3
    <KeepAliveMaxTimeout> 3 </KeepAliveMaxTimeout>

    # Specifies how many requests are allowed per keep-alive connection,
    # if keep-alive connections are enabled
    #   Default: 100
    <KeepAliveMaxRequests> 100 </KeepAliveMaxRequests>

    # Specifies how many queued requests the server can handle simultaneously
    #   Default: 100
    <MaxRequestBacklog> 100 </MaxRequestBacklog>

    # Specifies how large the read buffer is for requests, in bytes
    #   Default: 16384
    <RequestBufferSize> 16384 </RequestBufferSize>

    # Specifies how large the write buffer is for responses, in bytes
    #   Default: 16384
    <ResponseBufferSize> 16384 </ResponseBufferSize>

    # Specifies how large an incoming request's body is allowed to be, in bytes
    # If you experience 413 Content Too Large statuses being returned, you can increase this value
    # but beware that increasing this value too large may slow down your machine and/or cause issues
    #   Default: 268435456
    <MaxRequestBody> 268435456 </MaxRequestBody>

    # Specifies how large an outgoing response's body is allowed to be, in bytes
    # If you experience 413 Content Too Large statuses being returned, you can increase this value
    # but beware that increasing this value too large may slow down your machine and/or cause issues
    #   Default: 268435456
    <MaxResponseBody> 268435456 </MaxResponseBody>

    # How small a response body must be to bypass using any compression methods (in bytes)
    # This avoids the overhead and bloat of using compression algorithms on really
    # small bodies, however values that are too large (ie. > 1000 bytes) will increase
    # network overhead
    #   Default: 750
    <MinResponseCompressionSize> 750 </MinResponseCompressionSize>

    # Specifies how many connection threads exist for each server thread.
    # Note that under heavy load, up to MaxBurstThreadsPerChild threads may be created per
    # server thread--this value is purely the default "idle" amount of threads available.
    # There are four server threads: IPv4, IPv4 w/ TLS, IPv6, IPv6 w/ TLS
    #   Default: 12
    <IdleThreadsPerChild> 12 </IdleThreadsPerChild>

    # Specifies the maximum number of connection threads exist for each server thread under load.
    # Note that under normal circumstances, only the amount of IdleThreadsPerChild threads will
    # be used--up to MaxBurstThreadsPerChild threads will be utilized to decrease the overall size of
    # the connection backlog on each server thread to improve client performance.
    # There are four server threads: IPv4, IPv4 w/ TLS, IPv6, IPv6 w/ TLS
    #   Default: 60
    <MaxThreadsPerChild> 60 </MaxThreadsPerChild>

    # Whether or not to print the welcome banner on startup (true/false)
    #   Default: true
    <ShowWelcomeBanner> true </ShowWelcomeBanner>

    # Whether or not to check for a new version on startup (true/false)
    # Disabling this often will improve startup speed, but it is recommended to leave this on unless you know what you're doing.
    #   Default: true
    <StartupCheckLatestRelease> true </StartupCheckLatestRelease>
</Mercury>