name: Test Runner (Linux)

on:
  workflow_call:
    inputs:
      artifact-name:
        required: true
        type: string

jobs:
  Test-Linux:
    runs-on: ubuntu-24.04
    steps:
      - uses: actions/checkout@v4

      # Download binaries
      - uses: actions/download-artifact@v4
        with:
          name: mercury-binaries
          path: ./bin

      - name: Copy Default Config
        run: cp ./conf/default/*.conf ./conf

      - name: Install PHP-CGI
        run: |
          sudo apt update
          sudo apt install php-cgi

      - name: Configure Ports & Enable IPv6/TLS
        run: |
          port=8081
          sslPort=8082

          # Update conf/mercury.conf
          sed -i "s|<DocumentRoot>[[:space:]]*.*[[:space:]]*</DocumentRoot>|<DocumentRoot> ./tests/files/ </DocumentRoot>|" conf/mercury.conf
          sed -i "s|<Port>[[:space:]]*[0-9]\+[[:space:]]*</Port>|<Port> $port </Port>|" conf/mercury.conf
          sed -i "s|<TLSPort>[[:space:]]*.*[[:space:]]*</TLSPort>|<TLSPort> $sslPort </TLSPort>|" conf/mercury.conf
          sed -i "s|<EnablePHPCGI>[[:space:]]*off[[:space:]]*</EnablePHPCGI>|<EnablePHPCGI> on </EnablePHPCGI>|" conf/mercury.conf

          # Update tests/run.py
          sed -i "s|port[[:space:]]*=[[:space:]]*.*|port = $port|" tests/run.py
          sed -i "s|ssl_port[[:space:]]*=[[:space:]]*.*|ssl_port = $sslPort|" tests/run.py

      # Make TLS cert
      - name: Make TLS Cert
        run: |
          openssl req -x509 \
            -newkey rsa:4096 \
            -keyout conf/ssl/key.pem \
            -out conf/ssl/cert.pem \
            -sha256 \
            -days 1 \
            -nodes \
            -subj "/C=XX/ST=New York/L=NYC/O=The Mercury Project/OU=GitHub Action Runner/CN=The Mercury Developers"

      # Start Mercury
      - name: Start Mercury
        run: |
          cd bin
          sudo chmod +x ./mercury
          sudo ./mercury & echo $! > ../pid.txt

      # Run Python test cases
      - name: Python Test Runner
        run: |
          cd tests
          OUTPUT=$(python3 run.py)
          echo "$OUTPUT"
          if echo "$OUTPUT" | tail -n 2 | grep -q "Failure"; then
            kill -INT $(cat ../pid.txt)
            sleep 5
            exit 1
          fi

      # Kill the server
      - name: Kill Server
        run: |
          kill -INT $(cat pid.txt)
          sleep 5 # Allow time to shutdown
