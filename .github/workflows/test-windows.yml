name: Test Runner (Windows)

on:
  workflow_call:
    inputs:
      artifact-name:
        required: true
        type: string

jobs:
  Test-Windows:
    runs-on: windows-latest
    steps:
      - uses: actions/checkout@v4

      # Download binaries
      - name: Cache Windows Binaries
        uses: actions/cache@v4
        with:
          path: ./bin/mercury.exe
          key: mercury-windows-binaries-${{ github.sha }}
          enableCrossOsArchive: true

      - name: Copy Default Config
        run: |
          Copy-Item ./conf/default/mimes.conf ./conf/mimes.conf
          Copy-Item ./tests/mercury.conf.sample ./conf/mercury.conf

      - name: Setup PHP
        run: ./conf/setup_php.ps1

      - name: Configure Ports & Enable IPv6
        run: |
          # Config file
          $port = 8081
          $sslPort = 8082
          $filePath = "conf/mercury.conf"
          $content = Get-Content $filePath -Raw

          $content = [System.Text.RegularExpressions.Regex]::Replace($content, '<Port>\s*\d+\s*</Port>', "<Port> $port </Port>")
          $content = [System.Text.RegularExpressions.Regex]::Replace($content, '<TLSPort>\s*.+?\s*</TLSPort>', "<TLSPort> $sslPort </TLSPort>")

          Set-Content -Path $filePath -Value $content

          # Test Runner
          $filePath = "tests/run.py"
          $content = Get-Content $filePath -Raw

          $content = [System.Text.RegularExpressions.Regex]::Replace($content, 'port\s*=\s*.+', "port = $port")
          $content = [System.Text.RegularExpressions.Regex]::Replace($content, 'ssl_port\s*=\s*.+', "ssl_port = $sslPort")

          Set-Content -Path $filePath -Value $content

      # Make TLS cert
      - name: Make TLS Cert
        run: |
          openssl req -x509 -newkey rsa:4096 -keyout conf/ssl/key.pem -out conf/ssl/cert.pem -sha256 -days 1 -nodes -subj "/C=XX/ST=New York/L=NYC/O=The Mercury Project/OU=GitHub Action Runner/CN=The Mercury Developers"

      # Start Mercury
      - name: Start Mercury
        run: |
          cd bin
          powershell -command 'Start-Process .\mercury.exe -NoNewWindow -PassThru | ForEach-Object { $_.Id } > ..\pid.txt'

      # Run Python test cases
      - name: Python Test Runner
        run: |
          cd tests
          $output = python run.py
          echo $output
          if ($output.Split("`n")[-2] -like "*Failure*") {
            $mercury_pid = Get-Content ..\pid.txt
            Stop-Process -Id $mercury_pid -Force
            Start-Sleep -Seconds 5
            exit 1
          }

      # Kill the server
      - name: Kill Server
        run: |
          $mercury_pid = Get-Content pid.txt
          Stop-Process -Id $mercury_pid -Force
          Start-Sleep -Seconds 5
