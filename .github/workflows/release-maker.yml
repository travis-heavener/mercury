name: Make Release

on:
  workflow_dispatch:

permissions:
  contents: write

jobs:
  build:
    uses: ./.github/workflows/build.yml

  release:
    needs: build
    runs-on: ubuntu-24.04
    steps:
      - uses: actions/create-github-app-token@v1
        id: app-token
        with:
          app-id: ${{ vars.MERCURY_BOT_APP_ID }}
          private-key: ${{ secrets.MERCURY_BOT_KEY }}

      - uses: actions/checkout@v4
        with:
          token: ${{ steps.app-token.outputs.token }}

      - name: Set User
        run: |
          git config user.name "Mercury Actions Bot"
          git config user.email "228363331+mercury-actions-bot[bot]@users.noreply.github.com"

      # Download built binaries from build job
      - uses: actions/download-artifact@v4
        with:
          name: mercury-binaries
          path: ./bin

      # Make executables
      - name: Make Executable Shell Scripts
        run: chmod +x ./build_release.sh

      # Run release builder
      - name: Make Release
        run: make release

      # Read version from version.txt
      - name: Extract Version
        id: version
        run: |
          VERSION=$(sed 's/^Mercury //' version.txt)
          echo "version=$VERSION" >> $GITHUB_OUTPUT

      # Create GitHub Release
      - name: Create GitHub Release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          VERSION="${{ steps.version.outputs.version }}"
          SUMMARY_FILE=$(ls ./releases/SUMMARY_*.md | head -n1)
          TAR_FILE=$(ls ./releases/*.tar.gz | head -n1)
          ZIP_FILE=$(ls ./releases/*.zip | head -n1)

          # Determine if this is a pre-release (v0.*.*)
          if [[ "$VERSION" =~ ^v0\.[0-9]+\.[0-9]+$ ]]; then
            PRERELEASE="--prerelease"
          else
            PRERELEASE=""
          fi

          # Create release (tag is the version only, title keeps "Mercury vX.X.X")
          gh release create "$VERSION" "$TAR_FILE" "$ZIP_FILE" \
            --title "Mercury $VERSION" \
            --notes-file "$SUMMARY_FILE" \
            $PRERELEASE

      # Commit updated docs
      - name: Update Website
        env:
          GITHUB_TOKEN: ${{ steps.app-token.outputs.token }}
        run: |
          git add docs/releases.json docs/latest
          git commit -m "Update release metadata for ${{ steps.version.outputs.version }}"
          git push origin HEAD:main